<?phpnamespace App\Services\Client\Actions\Register;use App\Enums as Enums;use App\Models\User;use App\Models\Verification;use App\Services\Client\Contracts\VerifyRegisterCode;use App\Services\Client\Dto\Registration\VerifyCodeDto;use App\Tasks as Tasks;use DB;use Psr\SimpleCache\InvalidArgumentException;use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;use Throwable;class VerifyCodeAction implements VerifyRegisterCode{    /**     * @throws InvalidArgumentException     * @throws Throwable     */    public function execute(VerifyCodeDto $dto): array    {        /** @var User $client */        $client = app(Tasks\Client\FindByPhoneTask::class)->run($dto->phone);        $this->ensureClientIsExists($client);        $this->ensureVerificationCodeIsCorrect($client, $dto->verification_code);        DB::transaction(function () use ($client, $dto) {            $this->updateDeviceToken($client, $dto);            $this->verifyVerification($client);            $this->verifyPhone($client);        });        return [            'token' => $client->createToken('auth_token')->plainTextToken,        ];    }    private function updateDeviceToken(User $client, VerifyCodeDto $dto): void    {        if ($dto->device_token) {            app(Tasks\Client\CreateOrUpdateDeviceTokenTask::class)->run($client, $dto->device_token);        }    }    private function verifyVerification(User $client): void    {        $client->current_verification()->update([            'status' => Enums\Verification\Status::USED        ]);    }    private function verifyPhone(User $client): void    {        app(Tasks\Client\VerifyPhoneTask::class)->run($client);    }    private function ensureClientIsExists(?User $client): void    {        if (!$client) {            throw new UnprocessableEntityHttpException(                __('Номер телефона неверен.')            );        }    }    private function ensureVerificationCodeIsCorrect(User $client, string $verification_code): void    {        /** @var Verification $current_verification */        $current_verification = $client->current_verification()->first();        if (!$current_verification || $current_verification->isIncorrect($verification_code)) {            throw new UnprocessableEntityHttpException(                __('Неверный код. Попробуйте еще раз.')            );        }    }}