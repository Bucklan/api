<?phpnamespace App\Services\Client\Actions\Cart;use App\Models\Cart;use App\Models\Client;use App\Models\Product;use App\Services\Client\Contracts\AddProductToCart;use Auth;use Symfony\Component\Finder\Exception\AccessDeniedException;class AddProductAction implements AddProductToCart{    public function execute(Product $product, string $quantity, string $price_id): void    {        /** @var Client $client */        $client = Auth::user()->client;        $this->checkPrice($product, $price_id);        $this->checkProductIsAlreadyInCart($client, $product);        $this->createCart($client, $product, $quantity, $price_id);    }    private function createCart(Client $client, Product $product, string $quantity, string $price_id): void    {        Cart::create([            'city_id' => Auth::user()->city_id, //edited before -> $product->city->id            'client_id' => $client->id,            'product_id' => $product->id,            'quantity' => $quantity,            'price_id' => $price_id,        ]);    }    private function checkPrice(Product $product, string $price_id): void    {        if (!$product->prices->contains('id', '=', $price_id)) {            throw new AccessDeniedException(                __('Неправильная цена.')            );        }    }    private function checkProductIsAlreadyInCart(Client $client, Product $product): void    {        if ($client->carts->contains('product_id', '=', $product->id)) {            throw new AccessDeniedException(                __('Товар уже в корзине.')            );        }    }}