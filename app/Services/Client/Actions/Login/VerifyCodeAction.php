<?phpnamespace App\Services\Client\Actions\Login;use App\Models\User;use App\Models\Verification;use App\Services\Client\Contracts\VerifyLoginCode;use App\Services\Client\Dto\Login\VerifyCodeDto;use App\Tasks\Client\FindByPhoneTask;use Illuminate\Console\View\Components\Task;use Illuminate\Support\Facades\DB;use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;use Symfony\Component\HttpKernel\Exception\UnprocessableEntityHttpException;use App\Tasks as Tasks;class VerifyCodeAction implements VerifyLoginCode{    /**     * @param VerifyCodeDto $dto     * @return array     * @throws Throwable     */    public function execute(VerifyCodeDto $dto): array    {        /** @var User $client */        $client = app(Tasks\Client\FindByPhoneTask::class)->run($dto->phone);        $this->ensureThatClientHasVerified($client);        $this->ensureThatClientIsNotBlocked($client);        $this->ensureVerificationCodeIsCorrect($client, $dto->verification_code);        DB::transaction(function () use ($client, $dto) {            app(Tasks\Client\RevokeTokensTask::class)->run($client);            app(Tasks\Verification\VerifyTask::class)->run($client);            app(Tasks\Client\LoggedInTask::class)->run($client);        });        return [            'token' => app(Tasks\Client\GenerateTokenTask::class)->run($client),        ];    }    private function ensureThatClientHasVerified(User $client): void    {        if (!$client->hasVerifiedPhone()) {            throw new UnauthorizedHttpException(                'Basic', 'number phone has`t virified'            );        }    }    private function ensureThatClientIsNotBlocked(User $client): void    {        if ($client->isLoginBlocked()) {            throw new AccessDeniedHttpException(                'your email or phone number blocked');        }    }    private function ensureVerificationCodeIsCorrect(User $client, string $verification_code): void    {        /** @var Verification $current_verification */        $current_verification = $client->current_verification->first();        if (!$current_verification || $current_verification->isIncorrect($verification_code)) {            throw new UnprocessableEntityHttpException('code verifications error');        }    }}