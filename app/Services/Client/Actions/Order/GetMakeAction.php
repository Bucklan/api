<?phpnamespace App\Services\Client\Actions\Order;use App\Models\Client;use App\Models\Product;use App\Models\ProductPrice;use App\Enums as Enums;use App\Services\Client\Contracts\GetMakeOrder;use Auth;use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;class GetMakeAction implements GetMakeOrder{    public function execute(Product $product, string $price_id): array    {        /** @var Client $client */        $client = Auth::user();//        dd($client);        $this->ensureThatProductIsNotGame($product);        $price = ProductPrice::where('product_id', $product->id)->find($price_id);        $this->ensurePriceIsExists($price);        return [            'client_bonus_sum' => $client->getBonusSum(),            'product' => [                'id' => $product->id,                'name' => $product->name,                'cover' => $product->getMedia(Enums\File\Type::COVER),            ],            'price' => [                'id' => $price->id,                'days_count' => $price->days_count,                'price' => $price->price,                'bonus' => $price->bonus            ]        ];    }    private function ensureThatProductIsNotGame(Product $product): void    {        if ($product->type == Enums\Product\Type::GAME) {            throw new AccessDeniedHttpException(                __('Данный товар нельзя арендовать')            );        }    }    private function ensurePriceIsExists(?ProductPrice $price): void    {        if (empty($price)) {            throw new AccessDeniedHttpException(                __('Неправильная цена')            );        }    }}